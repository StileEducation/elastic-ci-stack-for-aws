#!/bin/bash

set -eu -o pipefail

# AWS ECR login support

# For logging into the current AWS account’s registry
if [[ "${AWS_ECR_LOGIN:-}" =~ ^(true|1)$ ]] ; then
  echo "~~~ Authenticating with AWS ECR"
  if ! ecr_login=$(aws ecr get-login) ; then
    echo echo "~~~ :warning: ECR login failed"
    exit 1
  fi
  eval "$ecr_login"
fi

# For logging into other AWS account’s registries
if [[ -n "${AWS_ECR_LOGIN_REGISTRY_IDS:-}" ]] ; then
  echo "~~~ Authenticating with AWS ECR"
  if ! ecr_login=$(aws ecr get-login --registry-ids "${AWS_ECR_LOGIN_REGISTRY_IDS}") ; then
    echo echo "~~~ :warning: ECR login failed"
    exit 1
  fi
  eval "$ecr_login"
fi

# DOCKER_HUB_* legacy config var support
if [[ -n "${DOCKER_HUB_USER:-}" && -n "${DOCKER_HUB_PASSWORD:-}" ]]; then
  echo "~~~ :warning: Deprecated DOCKER_HUB_* env variables"
  echo "The following env hook environments variables need updating:"
  echo "* DOCKER_HUB_USER is now DOCKER_LOGIN_USER"
  echo "* DOCKER_HUB_PASSWORD is now DOCKER_LOGIN_PASSWORD"
  DOCKER_LOGIN_USER="${DOCKER_HUB_USER}"
  DOCKER_LOGIN_PASSWORD="${DOCKER_HUB_PASSWORD}"
fi

# Generic docker login support

if [[ -n "${DOCKER_LOGIN_USER:-}" && -n "${DOCKER_LOGIN_PASSWORD:-}" ]] ; then
  echo "~~~ Authenticating with Docker server"

  if [[ -n "${DOCKER_LOGIN_SERVER:-}" ]] ; then
    docker login --username="${DOCKER_LOGIN_USER}" --password="${DOCKER_LOGIN_PASSWORD}" "${DOCKER_LOGIN_SERVER}"
  else
    docker login --username="${DOCKER_LOGIN_USER}" --password="${DOCKER_LOGIN_PASSWORD}"
  fi

  unset DOCKER_LOGIN_USER
  unset DOCKER_LOGIN_PASSWORD
  unset DOCKER_LOGIN_SERVER
fi
